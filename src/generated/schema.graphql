### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Activity {
  id: String!
  name: String!
  schedules(after: String, before: String, first: Int, last: Int, skip: Int): [Schedule!]!
  slug: String!
}

input ActivityCreateManyWithoutOrgInput {
  connect: [ActivityWhereUniqueInput!]
  create: [ActivityCreateWithoutOrgInput!]
}

input ActivityCreateOneWithoutSchedulesInput {
  connect: ActivityWhereUniqueInput
  create: ActivityCreateWithoutSchedulesInput
}

input ActivityCreateWithoutOrgInput {
  color: String
  id: String
  name: String!
  schedules: ScheduleCreateManyWithoutActivityInput
  slug: String!
}

input ActivityCreateWithoutSchedulesInput {
  color: String
  id: String
  name: String!
  org: OrgCreateOneWithoutActivitiesInput!
  slug: String!
}

input ActivityWhereUniqueInput {
  id: String
  slug: String
}

type Attendance {
  absentees(after: String, before: String, first: Int, last: Int, skip: Int): [Profile!]!
  attendees(after: String, before: String, first: Int, last: Int, skip: Int): [Profile!]!
  createdAt: DateTime!
  group: Group!
  id: String!
  schedule: Schedule!
  status: String!
  updatedAt: DateTime!
}

input AttendanceCreateManyWithoutAbsenteesInput {
  connect: [AttendanceWhereUniqueInput!]
  create: [AttendanceCreateWithoutAbsenteesInput!]
}

input AttendanceCreateManyWithoutAttendeesInput {
  connect: [AttendanceWhereUniqueInput!]
  create: [AttendanceCreateWithoutAttendeesInput!]
}

input AttendanceCreateManyWithoutGroupInput {
  connect: [AttendanceWhereUniqueInput!]
  create: [AttendanceCreateWithoutGroupInput!]
}

input AttendanceCreateOneWithoutScheduleInput {
  connect: AttendanceWhereUniqueInput
  create: AttendanceCreateWithoutScheduleInput
}

input AttendanceCreateWithoutAbsenteesInput {
  attendees: ProfileCreateManyWithoutAttendeeInput
  createdAt: DateTime
  group: GroupCreateOneWithoutAttendancesInput!
  id: String
  schedule: ScheduleCreateOneWithoutAttendanceInput!
  slug: String!
  status: String!
  updatedAt: DateTime
}

input AttendanceCreateWithoutAttendeesInput {
  absentees: ProfileCreateManyWithoutAbsenteeInput
  createdAt: DateTime
  group: GroupCreateOneWithoutAttendancesInput!
  id: String
  schedule: ScheduleCreateOneWithoutAttendanceInput!
  slug: String!
  status: String!
  updatedAt: DateTime
}

input AttendanceCreateWithoutGroupInput {
  absentees: ProfileCreateManyWithoutAbsenteeInput
  attendees: ProfileCreateManyWithoutAttendeeInput
  createdAt: DateTime
  id: String
  schedule: ScheduleCreateOneWithoutAttendanceInput!
  slug: String!
  status: String!
  updatedAt: DateTime
}

input AttendanceCreateWithoutScheduleInput {
  absentees: ProfileCreateManyWithoutAbsenteeInput
  attendees: ProfileCreateManyWithoutAttendeeInput
  createdAt: DateTime
  group: GroupCreateOneWithoutAttendancesInput!
  id: String
  slug: String!
  status: String!
  updatedAt: DateTime
}

input AttendanceWhereUniqueInput {
  id: String
  slug: String
}

type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

type Group {
  id: String!
  leader: Profile
  members(after: String, before: String, first: Int, last: Int, skip: Int): [Profile!]!
  name: String!
}

input GroupCreateInput {
  attendances: AttendanceCreateManyWithoutGroupInput
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupInput
  id: String
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMemberInput
  name: String!
  org: OrgCreateOneWithoutGroupsInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateManyWithoutLeaderInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutLeaderInput!]
}

input GroupCreateManyWithoutMembersInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutMembersInput!]
}

input GroupCreateManyWithoutOrgInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutOrgInput!]
}

input GroupCreateOneWithoutAttendancesInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutAttendancesInput
}

input GroupCreateOneWithoutGroupEnrollmentsInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutGroupEnrollmentsInput
}

input GroupCreateWithoutAttendancesInput {
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupInput
  id: String
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMemberInput
  name: String!
  org: OrgCreateOneWithoutGroupsInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutGroupEnrollmentsInput {
  attendances: AttendanceCreateManyWithoutGroupInput
  createdAt: DateTime
  endAt: DateTime
  id: String
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMemberInput
  name: String!
  org: OrgCreateOneWithoutGroupsInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutLeaderInput {
  attendances: AttendanceCreateManyWithoutGroupInput
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupInput
  id: String
  members: ProfileCreateManyWithoutMemberInput
  name: String!
  org: OrgCreateOneWithoutGroupsInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutMembersInput {
  attendances: AttendanceCreateManyWithoutGroupInput
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupInput
  id: String
  leader: ProfileCreateOneWithoutLeaderInput
  name: String!
  org: OrgCreateOneWithoutGroupsInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutOrgInput {
  attendances: AttendanceCreateManyWithoutGroupInput
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupInput
  id: String
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMemberInput
  name: String!
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupEnrollmentCreateManyWithoutGroupInput {
  connect: [GroupEnrollmentWhereUniqueInput!]
  create: [GroupEnrollmentCreateWithoutGroupInput!]
}

input GroupEnrollmentCreateManyWithoutProfileInput {
  connect: [GroupEnrollmentWhereUniqueInput!]
  create: [GroupEnrollmentCreateWithoutProfileInput!]
}

input GroupEnrollmentCreateWithoutGroupInput {
  createdAt: DateTime
  id: String
  profile: ProfileCreateOneWithoutGroupEnrollmentsInput!
  reason: String!
  updatedAt: DateTime
}

input GroupEnrollmentCreateWithoutProfileInput {
  createdAt: DateTime
  group: GroupCreateOneWithoutGroupEnrollmentsInput!
  id: String
  reason: String!
  updatedAt: DateTime
}

input GroupEnrollmentWhereUniqueInput {
  id: String
}

input GroupWhereUniqueInput {
  id: String
  slug: String
}

type Mutation {
  createDraft(content: String, title: String!): Post!
  createGroup(data: GroupCreateInput!): Group!
  createProfile(data: ProfileCreateInput!): Profile!
  deletePost(id: ID): Post
  login(email: String!, password: String!): AuthPayload!
  makeAttendance(absentees: [ID!], attendees: [ID!], scheduleId: ID!): Attendance!
  publish(id: ID): Post
  signup(email: String!, name: String, password: String!): AuthPayload!
}

type Org {
  activities(after: String, before: String, first: Int, last: Int, skip: Int): [Activity!]!
  groups(after: String, before: String, first: Int, last: Int, skip: Int): [Group!]!
  id: String!
  name: String!
}

input OrgCreateOneWithoutActivitiesInput {
  connect: OrgWhereUniqueInput
  create: OrgCreateWithoutActivitiesInput
}

input OrgCreateOneWithoutGroupsInput {
  connect: OrgWhereUniqueInput
  create: OrgCreateWithoutGroupsInput
}

input OrgCreateOneWithoutProfilesInput {
  connect: OrgWhereUniqueInput
  create: OrgCreateWithoutProfilesInput
}

input OrgCreateWithoutActivitiesInput {
  groups: GroupCreateManyWithoutOrgInput
  id: String
  name: String!
  profiles: ProfileCreateManyWithoutOrgInput
}

input OrgCreateWithoutGroupsInput {
  activities: ActivityCreateManyWithoutOrgInput
  id: String
  name: String!
  profiles: ProfileCreateManyWithoutOrgInput
}

input OrgCreateWithoutProfilesInput {
  activities: ActivityCreateManyWithoutOrgInput
  groups: GroupCreateManyWithoutOrgInput
  id: String
  name: String!
}

input OrgWhereUniqueInput {
  id: String
}

type Post {
  author: User
  content: String
  id: String!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: String
}

type Profile {
  birthday: DateTime
  email: String
  facebookId: String
  fullName: String!
  gender: String
  id: String!
  joinDate: DateTime
  oldId: String
  phoneNumber: String
}

input ProfileCreateInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateManyWithoutAbsenteeInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutAbsenteeInput!]
}

input ProfileCreateManyWithoutAttendeeInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutAttendeeInput!]
}

input ProfileCreateManyWithoutMemberInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutMemberInput!]
}

input ProfileCreateManyWithoutOrgInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutOrgInput!]
}

input ProfileCreateOneWithoutGroupEnrollmentsInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutGroupEnrollmentsInput
}

input ProfileCreateOneWithoutLeaderInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutLeaderInput
}

input ProfileCreateWithoutAbsenteeInput {
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateWithoutAttendeeInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateWithoutGroupEnrollmentsInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateWithoutLeaderInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateWithoutMemberInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutProfilesInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileCreateWithoutOrgInput {
  absentee: AttendanceCreateManyWithoutAbsenteesInput
  attendee: AttendanceCreateManyWithoutAttendeesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutProfileInput
  id: String
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMembersInput
  monthOfBirth: Int
  oldId: String
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutProfileInput
  yearOfBirth: Int
}

input ProfileWhereUniqueInput {
  id: String
  oldId: String
  slug: String
}

type Query {
  activities(after: String, before: String, first: Int, last: Int, skip: Int): [Activity!]!
  attendances(after: String, before: String, first: Int, last: Int, skip: Int): [Attendance!]!
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  groups(after: String, before: String, first: Int, last: Int, skip: Int): [Group!]!
  me: User
  membersInGroup: [Profile!]!
  post(id: ID): Post
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(after: String, before: String, first: Int, last: Int, skip: Int): [Profile!]!
  schedules(after: String, before: String, first: Int, last: Int, skip: Int): [Schedule!]!
  scheduleUntilNow: [Schedule!]!
}

type Schedule {
  activity: Activity!
  date: DateTime!
  id: String!
}

input ScheduleCreateManyWithoutActivityInput {
  connect: [ScheduleWhereUniqueInput!]
  create: [ScheduleCreateWithoutActivityInput!]
}

input ScheduleCreateOneWithoutAttendanceInput {
  connect: ScheduleWhereUniqueInput
  create: ScheduleCreateWithoutAttendanceInput
}

input ScheduleCreateWithoutActivityInput {
  attendance: AttendanceCreateOneWithoutScheduleInput!
  date: DateTime!
  id: String
}

input ScheduleCreateWithoutAttendanceInput {
  activity: ActivityCreateOneWithoutSchedulesInput!
  date: DateTime!
  id: String
}

input ScheduleWhereUniqueInput {
  id: String
}

type User {
  email: String!
  id: String!
  name: String
  posts: [Post!]!
  profile: Profile
}

input UserCreateManyWithoutProfileInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutProfileInput!]
}

input UserCreateWithoutProfileInput {
  email: String!
  id: String
  name: String
  password: String!
  permission: Int!
  posts: PostCreateManyWithoutAuthorInput
}

input UserWhereUniqueInput {
  email: String
  id: String
}
