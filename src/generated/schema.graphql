### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input ActivityCreateManyWithoutActivitiesInput {
  connect: [ActivityWhereUniqueInput!]
  create: [ActivityCreateWithoutOrgInput!]
}

input ActivityCreateWithoutOrgInput {
  id: ID
  name: String!
  type: String!
}

input ActivityWhereUniqueInput {
  id: ID
}

type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

type Group {
  id: ID!
  leader: Profile
  members(after: ID, before: ID, first: Int, last: Int, skip: Int): [Profile!]!
  name: String!
}

input GroupCreateInput {
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMembersInput
  name: String!
  org: OrgCreateOneWithoutOrgInput
  slug: String
  year: Int
}

input GroupCreateManyWithoutGroupsInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutOrgInput!]
}

input GroupCreateOneWithoutGroupInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutMembersInput
}

input GroupCreateWithoutMembersInput {
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  name: String!
  org: OrgCreateOneWithoutOrgInput
  slug: String
  year: Int
}

input GroupCreateWithoutOrgInput {
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMembersInput
  name: String!
  slug: String
  year: Int
}

input GroupWhereUniqueInput {
  id: ID
  slug: String
}

type Mutation {
  createDraft(content: String, title: String!): Post!
  createGroup(data: GroupCreateInput!): Group!
  createProfile(data: ProfileCreateInput!): Profile!
  deletePost(id: ID): Post
  login(email: String!, password: String!): AuthPayload!
  publish(id: ID): Post
  signup(email: String!, name: String, password: String!): AuthPayload!
}

input OrgCreateOneWithoutOrgInput {
  connect: OrgWhereUniqueInput
  create: OrgCreateWithoutProfilesInput
}

input OrgCreateWithoutProfilesInput {
  activities: ActivityCreateManyWithoutActivitiesInput
  groups: GroupCreateManyWithoutGroupsInput
  id: ID
  name: String!
}

input OrgWhereUniqueInput {
  id: ID
}

type Post {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

type Profile {
  birthday: DateTime
  email: String
  facebookId: String
  fullName: String!
  gender: String
  group: Group
  id: ID!
  joinDate: DateTime
  oldId: String
}

input ProfileCreateInput {
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  group: GroupCreateOneWithoutGroupInput
  groups: GroupCreateManyWithoutGroupsInput
  id: ID
  joinDate: DateTime
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileCreateManyWithoutMembersInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutGroupInput!]
}

input ProfileCreateOneWithoutLeaderInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutGroupsInput
}

input ProfileCreateWithoutGroupInput {
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groups: GroupCreateManyWithoutGroupsInput
  id: ID
  joinDate: DateTime
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileCreateWithoutGroupsInput {
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  group: GroupCreateOneWithoutGroupInput
  id: ID
  joinDate: DateTime
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileWhereUniqueInput {
  id: ID
  oldId: String
  slug: String
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  groups: [Group!]
  me: User
  post(id: ID): Post
  profiles(after: ID, before: ID, first: Int, last: Int, skip: Int): [Profile!]!
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutProfileInput!]
}

input UserCreateWithoutProfileInput {
  email: String!
  id: ID
  name: String
  password: String!
  posts: PostCreateManyWithoutPostsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
