### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Activity {
  id: ID!
  name: String!
}

input ActivityCreateManyWithoutActivitiesInput {
  connect: [ActivityWhereUniqueInput!]
  create: [ActivityCreateWithoutOrgInput!]
}

input ActivityCreateOneWithoutActivityInput {
  connect: ActivityWhereUniqueInput
  create: ActivityCreateWithoutSchedulesInput
}

input ActivityCreateWithoutOrgInput {
  id: ID
  name: String!
  schedules: ScheduleCreateManyWithoutSchedulesInput
  type: String!
}

input ActivityCreateWithoutSchedulesInput {
  id: ID
  name: String!
  org: OrgCreateOneWithoutOrgInput!
  type: String!
}

input ActivityWhereUniqueInput {
  id: ID
}

input AttendanceCreateManyWithoutAttendancesInput {
  connect: [AttendanceWhereUniqueInput!]
  create: [AttendanceCreateWithoutMemberInput!]
}

input AttendanceCreateWithoutMemberInput {
  createdAt: DateTime
  id: ID
  present: Boolean!
  schedule: ScheduleCreateOneWithoutScheduleInput!
  status: String!
  updatedAt: DateTime
}

input AttendanceWhereUniqueInput {
  id: ID
}

type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

type Group {
  id: ID!
  leader: Profile
  members(after: ID, before: ID, first: Int, last: Int, skip: Int): [Profile!]!
  name: String!
}

input GroupCreateInput {
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMembersInput
  name: String!
  org: OrgCreateOneWithoutOrgInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateManyWithoutGroupsInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutOrgInput!]
}

input GroupCreateManyWithoutLeaderInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutLeaderInput!]
}

input GroupCreateManyWithoutMemberInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutMembersInput!]
}

input GroupCreateWithoutLeaderInput {
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  members: ProfileCreateManyWithoutMembersInput
  name: String!
  org: OrgCreateOneWithoutOrgInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutMembersInput {
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  name: String!
  org: OrgCreateOneWithoutOrgInput
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupCreateWithoutOrgInput {
  createdAt: DateTime
  endAt: DateTime
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  leader: ProfileCreateOneWithoutLeaderInput
  members: ProfileCreateManyWithoutMembersInput
  name: String!
  slug: String
  stage: String!
  startAt: DateTime
  updatedAt: DateTime
  year: Int
}

input GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput {
  connect: [GroupEnrollmentWhereUniqueInput!]
  create: [GroupEnrollmentCreateWithoutGroupInput!]
}

input GroupEnrollmentCreateWithoutGroupInput {
  createdAt: DateTime
  id: ID
  profile: ProfileCreateOneWithoutProfileInput!
  reason: String!
  updatedAt: DateTime
}

input GroupEnrollmentWhereUniqueInput {
  id: ID
}

input GroupWhereUniqueInput {
  id: ID
  slug: String
}

type Mutation {
  createDraft(content: String, title: String!): Post!
  createGroup(data: GroupCreateInput!): Group!
  createProfile(data: ProfileCreateInput!): Profile!
  deletePost(id: ID): Post
  login(email: String!, password: String!): AuthPayload!
  publish(id: ID): Post
  signup(email: String!, name: String, password: String!): AuthPayload!
}

input OrgCreateOneWithoutOrgInput {
  connect: OrgWhereUniqueInput
  create: OrgCreateWithoutProfilesInput
}

input OrgCreateWithoutProfilesInput {
  activities: ActivityCreateManyWithoutActivitiesInput
  groups: GroupCreateManyWithoutGroupsInput
  id: ID
  name: String!
}

input OrgWhereUniqueInput {
  id: ID
}

type Post {
  author: User
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

type Profile {
  birthday: DateTime
  email: String
  facebookId: String
  fullName: String!
  gender: String
  id: ID!
  joinDate: DateTime
  oldId: String
  phoneNumber: String
}

input ProfileCreateInput {
  attendances: AttendanceCreateManyWithoutAttendancesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMemberInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileCreateManyWithoutMembersInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutMemberInput!]
}

input ProfileCreateOneWithoutLeaderInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutLeaderInput
}

input ProfileCreateOneWithoutProfileInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUsersInput
}

input ProfileCreateWithoutLeaderInput {
  attendances: AttendanceCreateManyWithoutAttendancesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  joinDate: DateTime
  member: GroupCreateManyWithoutMemberInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileCreateWithoutMemberInput {
  attendances: AttendanceCreateManyWithoutAttendancesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
  yearOfBirth: Int
}

input ProfileCreateWithoutUsersInput {
  attendances: AttendanceCreateManyWithoutAttendancesInput
  birthday: DateTime
  createdAt: DateTime
  dayOfBirth: Int
  email: String
  facebookId: String
  fullName: String!
  gender: String
  groupEnrollments: GroupEnrollmentCreateManyWithoutGroupEnrollmentsInput
  id: ID
  joinDate: DateTime
  leader: GroupCreateManyWithoutLeaderInput
  member: GroupCreateManyWithoutMemberInput
  monthOfBirth: Int
  oldId: String
  org: OrgCreateOneWithoutOrgInput
  phoneNumber: String
  slug: String
  updatedAt: DateTime
  yearOfBirth: Int
}

input ProfileWhereUniqueInput {
  id: ID
  oldId: String
  slug: String
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  groups: [Group!]
  me: User
  post(id: ID): Post
  profiles(after: ID, before: ID, first: Int, last: Int, skip: Int): [Profile!]!
}

type Schedule {
  date: DateTime!
  id: ID!
}

input ScheduleCreateManyWithoutSchedulesInput {
  connect: [ScheduleWhereUniqueInput!]
  create: [ScheduleCreateWithoutActivityInput!]
}

input ScheduleCreateOneWithoutScheduleInput {
  connect: ScheduleWhereUniqueInput
  create: ScheduleCreateWithoutAttendancesInput
}

input ScheduleCreateWithoutActivityInput {
  attendances: AttendanceCreateManyWithoutAttendancesInput
  date: DateTime!
  id: ID
}

input ScheduleCreateWithoutAttendancesInput {
  activity: ActivityCreateOneWithoutActivityInput!
  date: DateTime!
  id: ID
}

input ScheduleWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutProfileInput!]
}

input UserCreateWithoutProfileInput {
  email: String!
  id: ID
  name: String
  password: String!
  posts: PostCreateManyWithoutPostsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
